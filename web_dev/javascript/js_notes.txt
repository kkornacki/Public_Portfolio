Javascript can display data in different ways:
    - Writing into an HTML element using innerHTML
    - Writing into the HTML to utput using document.write()
        - using document.write() after the HTML document is loaded will delete all existing HTML
    - Writing into an alert box using window.alert()
    - Writing into the browser console using console.log()

JavaScript does not have any print object or print methods.
You cannot access output devices from JavaScript.
JavaScript statements are composed of;
    - Values
    - Operators
    - Expressions
    - Keywords
    - Comments
JavaScript statements must end with a semicolon (;)
JavaScript ignores multiple whitespaces, so adding whitespace to improve readability is ok.
Some keywords in Java;
    - var - defines a variable
    - let - declares a block variable
    - const - delcares a block constant
    - if - marks a block of statements to be executed on a condition
    - switch - marks a block of statement to be executed in different cases
    - for - marks a block of statements to be executed in a loop
    - function - declares a function
    - return - exits a function
    - try - implements error handling to a block of statements
JavaScript Literals:
    - Fixed Values
JavaScript Variables:
    - Variable Values
JavaScript Comments:
    Comments are written as single or double line comments.
        - Single Line: // this is a comments
        - Double Line: /* Anything between these characters is a comment */
JavaScript Naming Convention (beginning):
    - A letter (A-Z or a-z)
    - A dollar sign ($)
    - An underscore (_)
JavaScript IS a Case-Sensitive Language
JavaScript uses the Unicode character set.
Note on VAR keyword:
    - The var keyword should only be used for code written for older browsers
    - This was replaced by the 'let' and 'const' keywords in 2015
Note on when to use let, var or const:
    - Use 'const' if the value should not be changed
    - Use 'const' if the type should not be changed
    - Use 'let' if you can't use 'const'
    - Use var if you MUST support older browsers
    - You cannot redeclare a variable that was created using 'let' or 'const' (only 'var')
PROFESSIONAL TIPS;
    - Use the underscore (_) when naming variables or constants for PRIVATE variables
    - Use the dollar sign ($) as an alias for the main function in a JavaScript library
LET KEYWORD:
    - Variables declared with 'let' have BLOCK SCOPE
    - Variables delcared with 'let' must be Declared BEFORE use
    - Variables declared with 'let' cannot be redeclared on the same page
SCOPE NOTES
    BLOCK SCOPE:
        - variables declared within a function (block) cannot be accessed from outside the block
    GLOBAL SCOPE:
        - variables declared with the 'var' keyword always have GLOBAL SCOPE
        - variables declared with the 'var' keyword CANNOT have block scope
    GENERAL:
        - 'let' and 'const' have block scope
        - 'let' and 'const' cannot be redeclared 
        - 'let' and 'const' must be declared before use
        - 'let' and 'const' does not bind to 'this'
        - 'let' and 'const' are not 'hoisted'
HOISTED VARIABLES USING 'VAR':
    - variables declared with 'var' are 'hoisted' and can be inintialized at any time. 
        This means they can be used before they are declared.
CONSTANT OBJECTS AND ARRAYS:
    - The keyword 'const' does not indicate the value cannot change - instead, it defines a constant 
        REFERENCE TO the value.
TYPES OF JAVASCRIPT OPERATORS:
    - Arithmetic Operators ( + - * ** / % ++ --)
    - Assignment Operators  ( = += -= *= /= %= **= )
    - Comparison Operators ( == === != !=== > < >= <= ?)
    - String Operators 
    - Logical Operators ( && || !)
    - Bitwise Operators ( & | ~ ^ << >> >>>)
        - Bit operators work on 32 bit numbers. 
    - Ternary Opertors 
    - Type Operators (typeof instanceof)
EIGHT DATA TYPES IN JAVASCRIPT:
    - String
    - Number 
    - Bigint 
    - Boolean 
    - Undefined 
    - Null 
    - Symbol 
    - Object 
        - Built-In Objects include: objects, arrays, dates, maps, sets, intarrays, floatarrays, promises and more
JavaScript Types are Dynamic - this means the same varaible can hold different data types.
NOTE ON NUMBERS:
    - All JS numberes are stored as decimal (floating point) numbers.
Functions can be used as variable values, for example:
    - let x = runThisFunction(param)
OBJECTS IN JAVASCRIPT:
    - Object Properties
    - Object Methods 
    Syntax: 
        const objName = {}
        objName.property = 'value',
        objName.property2 = 'value2',
        objName.property3 = 'value3
    - Accessing a JS Object's Property:
        objName.propertyName 
        objName["propertyName"]
JavaScript Object Methods:
    - Methods are function definitions stored as property values.
        objMethod = function() {return this.firstName + " " + this.lastName;}
THE GIST OF IT:
    - Objects are containers for Properties and Methods
    - Properties are named Values 
    - Methods are Functions stored as Properties 
    - Properties can be primitive values, functions or even other objects 
    - All JavaScript values, except primitives, are objects. 
    - Primitive values are immutable (they cannot be changed and are hard-coded)
    - JavaScript Objects are Mutable (they can be changed)
MORE ON OBJECTS:
    - Objects are unordered collections of Properties
    - You can add a new property to an object simply by giving it a value.
            const objName = {}
                objName.fName = 'Keith';
                objName.lName = 'Kornacki';
                object.fullName = objName.fName + " " + objName.lName;
    - The DELETE keyword deletes a property from an object entirely.
NESTED OBJECTS EXAMPLE:
    person = {
        name: "Keith",
        age: 32,
        kids: {
            son: "Aidan",
            daughter: "Chloe"
        }
    }

    // Accessing the sub-object
        person.kids.son
        person.kids.daughter 
        person.kids["son"]
        person.kids["daughter"]
        person["kids"]["son"]
        person["kids"]["daughter"]

Object Methods are actions that can be performed on objects. A Method is a function
    definition stored as a property value. For example:

        person = {
            fName: "Keith",
            lName: "Kornacki",
            age: 32,
            kids: {
                son: "Aidan",
                daughter: "Chloe"
            }
            // THIS IS AN OBJECT METHOD
            fullName: function(){
                return this.fName + " " + this.lName;
            }
        }
        
        let user_name = person.fullName()
 JavaScript Object Constructors:
    To create an object t ype, we use the object constructor function. It is considered
        good practice to name constructor functions with an upper-case first letter:
            function PersonConstructor(first, last, age, eye){
                this.firstName = first;
                this.lastName = last;
                this.age = age;
                this.eyeColor = eye;
                this.profession = "Default Profession Value for ALL PersonConstructor instances";
            }    

            const mySelf = PersonConstructor("Keith", "Kornacki", 32, "Green");
Constructor functions can have methods just like other objects.
You can also add Methods to an Object created using the Constructor Function.
You can NOT add a Method to the Constructor itself:
    PersonConstructor.changeName = function(name){
        this.lastName = "Wilson";
    }
    ^ The above code will produce an error.
Adding a new method to the CONSTRUCTOR must be done to the CONSTRUCTOR FUNCTION PROTOTYPE:
    Person.prototype.changeName = function(name){
        this.lastName = name;
    }
    mySelf.changeName("Bob");
BUILT-IN JAVASCRIPT CONSTRUCTORS:
    JavaScript has built-in constructors for all native objects;
        new Object()
        new Array()
        new Map()
        new Set()
        new Date()
        new RegExp()
        new Function()
JAVASCRIPT EVENT HANDLING:
    <element event="some JavaScript">
    <element event='some JavaScript">
    
    For example:
        <button onclick="document.getElementById('demo').innerHTML = Date()">The Time Is?</button>
        <button onclick="this.innerHTML = Date()">Change Button Text</button>
    HTML event attributes can execute JavaScript code directly.
    HTML event attributes can call JavaScript functions.
    You can assign your own event handler to HTML elements
    You can prevent events from being sent or being handled.
    And more.
JAVASCRIPT STRING ESCAPE CHARACTERS (SEQUENCES):
    \b (Backspace)
    \f (Form Feed)
    \n (New Line)
    \r (Carriage Return)
    \t (Horizontal Tabulator)
    \v (Vertical Tabulator)
    \' (Single Quote)
    \" (Double Quote)
    \\ (Backslash)
STRING METHODS:
    https://www.w3schools.com/js/js_string_methods.asp
STRING SEARCH METHODS:
    https://www.w3schools.com/js/js_string_search.asp
String Templates utilize backticks, and allow for INTERPOLATION:
    let firstName = "Keith"
    let lastName = "Kornacki"
    let fullName = `Welcome ${firstName} ${lastName}!`;
    